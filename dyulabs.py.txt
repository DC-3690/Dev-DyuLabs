# python 3.8

import random
import time
import RPi.GPIO as GPIO
import Adafruit_DHT

from paho.mqtt import client as mqtt_client

# Set the LED and GPIO pin
PIN_NO = 5
GPIO.setmode(GPIO.BOARD)
GPIO.setup(PIN_NO,GPIO.OUT)

# Set the sensor type and GPIO pin
sensor_type = Adafruit_DHT.DHT11  # Use DHT22 for DHT22 sensor
gpio_pin = 21 # Change this to the GPIO pin your sensor is connected to



broker = 'broker.emqx.io'
port=1883
topic1 = "python/led"
topic2 = "python/sensor"
# generate client ID with pub prefix randomly
client_id = f'python-mqtt-{random.randint(0, 1000)}'
username = 'dev'
password = 'dev@123'


def connect_mqtt():
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)
    print("clientID",client_id)
    GPIO.output(PIN_NO,False)
    client = mqtt_client.Client(client_id)
  #  client.tls_set(ca_certs='./emqxsl-ca.crt')
    client.username_pw_set(username, password)
    client.on_connect = on_connect
    client.connect(broker, port)
    return client


def publish(client):
    try:
        # Try to read data from the sensor
        humidity, temperature = Adafruit_DHT.read_retry(sensor_type, gpio_pin)

        # Check if data was successfully read
        if humidity is not None and temperature is not None:
            print(f'Temperature: {temperature:.2f}Â°C')
            print(f'Humidity: {humidity:.2f}%')
            msg = f'{temperature:.2f},{humidity:.2f}'
            result = client.publish(topic2, msg)
            status = result[0]
            if status == 0:
                print(f"Send `{msg}` to topic1 `{topic2}`")
            else:
                print(f"Failed to send message to topic1 {topic2}")

        else:
            print('Failed to retrieve data from sensor. Check your wiring.')

    except KeyboardInterrupt:
        print('Measurement stopped by user')
    except Exception as e:
        print(f'Error: {str(e)}')



# def on_message(client, userdata, msg):
#         print(f"Received `{msg.payload.decode()}` from `{msg.topic}` topic")
        
def subscribe(client: mqtt_client):
    def on_message(client, userdata, msg):
        if msg.payload.decode() == "on":
            GPIO.output(PIN_NO,True)
        if msg.payload.decode() == "off":
            GPIO.output(PIN_NO,False)
        print(f"Received `{msg.payload.decode()}` from `{msg.topic}` topic")
        publish(client)
    client.subscribe(topic1)
    client.on_message = on_message
    


def run():
    client = connect_mqtt()
    subscribe(client)
    client.loop_forever()


    
if __name__ == '__main__':
    run()